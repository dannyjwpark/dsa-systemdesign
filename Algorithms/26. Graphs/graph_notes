1) types of trees

Tree: an undirected graph w/ no cycles
  - connected graph with N nodes & N-1 nodes

Rooted tree: tree with a designated root node where every edge either points away from or towards the root node
  - arborescence (out-tree) : graph where edges point away from the root 
  - anti-arborescence (in-tree) : graph where edges point toward the root

Directed Acyclic Graphs (DAGS) : directed graphs with no cycles
  - all out-tress are DAGS, but not all DAGs are out-trees

Bipartite Graph: graph whose vertices can be split into 2 independent groups U,V such that every edge connects betweens U and V
  -   graph w/ 2 colorable nodes, or there  is no odd-length cycle

Complete graph: graph w/ a unique ege between every paid of nodes
  - graph w/ n vertices is denoted as the graph Kn 
  - seen as worst type of graph (in performance)

---------------------------------------------------------------------------------------------------------
 
2) representing graphs

2a) 2-D adjacency matrix
- m[i][j] : represents edge weight of going from node i to node j


  A   B   C   D
A 0   4   1   9
B 3   0   6   11
C 4   1   0   2
D 6   5  -4   0

A->D edge weight = m[A][D] = 9

pros: 1) space-efficient for dense graphs 2) edge weight lookup: O(1)   3) simplest graph representation
cons: 1) requires O(V^2) space  2) iterating over all edges takes O(V^2) time 


2b) Adjacency List
  - a way to represent graph as a map from nodes to lists o fedges

adjacency_list = {
  A: [[B,4], [C,1]],
  B: [[C,6]],
  C: [[A,4],[B,1],[D,2]],
  D: []
}

=> node C can reach:
  - node A w/ cost 4
  - node B w/ cost 1
  - node D w/ cost 2

Pros: 1) space-efficient for sparse graphs 2) iterating over all edges is efficient
Cons: 1) less space-efficient for denser graphs 2) edge weight lookup is O(E) 


2c) Edge list
- represents a graph as simple as an unordered list of edges
- (u,v,w) : "the cost from node "u" to node "v" is "w" "

[
  [C,A,4], [A,C,1], [B,C,6], [A,B,4], [C,B,1], [C,D,2]
]

- seldomly used b/c of its lack of structure
Pros: 1) space-efficient for sparse graphs 2) iterating over all edges is efficient
Cons: 1) less space-efficient for denser graphs 2) edge weight lookup is O(E) 
---------------------------------------------------------------------------------------------------------

3) Common Graph Theory Problems

for graph problems, ask yourself...

- Is the graph directed or undirected?
- Are the edges of the graph weighted?
- Is the graph I will encounter likely to be sparse or dense w/ edges?
- Should I use an adjency matrix, adjacency list, an edge list or other structure to represent the graph efficiently?


3a) Shortest Path
  - Q: Given a weighted graph, find the shortest path of edges from node A to node B

  - Algorithms used: 
    - BFS (unweighted graphs)
    - Dijkstra's
    - Bellman-Ford
    - Floyd-Warshall
    - A*


3b) Connectivity
  - Q: Is there any path that exists between node A & node B?

  - typical solution: Use union find data structure or any search algorithm (e.g. DFS)


3C) Detecting negative cycles
  - Q: Does my weighted digraph have any negative cycles? If so, where?

  - Algorithms: Bellman-Ford, Floyd-Warshall


3d) Strongly Connected Components (SCC)
  - self-contained cycles within a directed graph (where every vertex in a given cycle can reach every other vertex in the same cycle)

  - Algorithms: Tarjan's algorithm, Kosaraju's algorithm


3e) Traveling salesman problem
  - Q: Given a list of cities and the distances between each pair of cities, what is the shorted possible route that visits each city exactly once and returns to the origin city?

  - Algorithms: Held-Karp, branch & bound, and many other approximation algorithms


3f) Finding bridges
  - bridge / cut edge: an edge whose removal increases the number of connected components
  - important in graph theory b/c they hint "weak points", "bottlenecks", or "vulnerabilities" in a graph

3g) Articulation points
  - articulation point / cut vertex: any node in a graph whose removal increaes number of connected components

3h) Minimum Spanning Tree (MST)
  - a subset of the edges of a connected, edge-weighted graph that connects all vertices together, 
    without any cycles and with minimum possible total edge weight

    - Algorithms: Kruskal's, Prim's, Boruvka's algorithm

3i) Network flow: max flow
  - Q: With an infinite input source, how much "flow" can we push through the network?

  - Algorithms: Ford-Fulkerson, Edmonds-Karp, Dinic's algorithm

---------------------------------------------------------------------------------------------------------

4) Graph theory: DFS

time comlexity: O(V+E)
  - V: # of vertices
  - E: # of edges

- useful when counting connected components, determining connectivity, finding bridges/articulation points

- when re-visiting a node, back-track


What else can DFS do?
  - compute a graph's minimum spanning tree
  - detect and find cycles in a graph
  - check if a graph is bipartite
  - find strongly connected components
  - topologically sort the nodes of a graph
  - find bridges and articulation points
  - find augmenting paths in a flow network
  - generate mazes
---------------------------------------------------------------------------------------------------------
5) Graph theory: BFS
time comlexity: O(V+E)
  - V: # of vertices
  - E: # of edges

- particularly useful for 1 thing: finding the shortest path on "unweighted" graphs"
